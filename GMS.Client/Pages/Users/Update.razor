@page "/users/update/{id:int}"
@attribute [HaveRoles(Roles.Admin)]

<div class="bg-white shadow-sm p-4 rounded rounded-3 mt-4">
    <h3 class="fs-3">Update</h3>

    <EditForm Model="UpdateUserDto" OnValidSubmit="UpdateAsync">
        <DataAnnotationsValidator />
        <div class="mb-3">
            <lable class="mb-1">Name</lable>
            <InputText @bind-Value="UpdateUserDto.Name" class="form-control" placeholder="Name" />
            <ValidationMessage For="() => UpdateUserDto.Name" />
        </div>
        <div class="mb-3">
            <lable class="mb-1">Email</lable>
            <InputText @bind-Value="UpdateUserDto.Email" class="form-control" placeholder="Email" />
            <ValidationMessage For="() => UpdateUserDto.Email" />
        </div>
        <div class="mb-3">
            <label class="mb-1">Role</label>
            <InputSelect @bind-Value="UpdateUserDto.Role" class="form-select">
                <option disabled selected hidden>Role</option>
                @foreach (var role in Enum.GetNames<Roles>())
                {
                    <option value="@role">@role</option>
                }
            </InputSelect>
            <ValidationMessage For="() => UpdateUserDto.Role" />
        </div>
        <div class="d-flex justify-content-end gap-2">
            <a href="/users" class="btn btn-secondary">Back</a>
            <SpinnerButton Text="Update" IsSpinning="@IsUpdating" />
        </div>
    </EditForm>

</div>
